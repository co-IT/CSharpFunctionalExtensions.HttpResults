using System.Text;
using CSharpFunctionalExtensions.HttpResults.Generators.UnitResultExtensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CSharpFunctionalExtensions.HttpResults.Generators;

[Generator]
public class ResultExtensionsGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new ResultSyntaxReceiver());
    }
    
    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not ResultSyntaxReceiver receiver)
            return;
        
        ResultExtensionsGeneratorValidator.CheckRules(receiver.MapperClasses, receiver.ResultErrorClasses, context);
        
        var sourceBuilder = new StringBuilder();
        
        sourceBuilder.AppendLine("// <auto-generated/>");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("#nullable enable");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("""
                                 using CSharpFunctionalExtensions;
                                 using IResult = Microsoft.AspNetCore.Http.IResult;
                                 using Microsoft.AspNetCore.Http;
                                 using Microsoft.AspNetCore.Mvc;
                                 using Microsoft.Net.Http.Headers;
                                 """);
        receiver.RequiredNamespaces
            .Where(@namespace => !@namespace.StartsWith("global"))
            .Distinct()
            .Select(@namespace => $"using {@namespace};")
            .ToList()
            .ForEach(@using => sourceBuilder.AppendLine(@using));
        
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine("public static partial class ResultExtensions {");
        sourceBuilder.AppendLine();
        
        foreach (var mapperClass in receiver.MapperClasses)
        {
            var mapperClassName = mapperClass.Identifier.Text;
            var mappingProperty = mapperClass.Members
                .FirstOrDefault(member => (member as PropertyDeclarationSyntax)?.Identifier.Text == "Map") as PropertyDeclarationSyntax;
            var mappingTypes = (mappingProperty?.Type as GenericNameSyntax)?.TypeArgumentList.Arguments
                .Select(type => type.ToString())
                .ToArray();
            
            if (mappingTypes is null || mappingTypes.Length != 2)
                throw new ArgumentException($"Mapping property in class {mapperClassName} must have exactly two generic arguments.");
            
            var resultErrorType = mappingTypes[0];
            var httpResultType = mappingTypes[1];
            
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToAcceptedAtRouteHttpResultTE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToAcceptedHttpResultTE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToCreatedAtRouteHttpResultTE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToCreatedHttpResultTE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToFileHttpResultByteArrayE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToFileHttpResultStreamE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToFileStreamHttpResultStreamE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToHttpResultTE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(ResultExtensions.ResultExtensionsGenerator.ToNoContentHttpResultTE(mapperClassName, resultErrorType, httpResultType));
            sourceBuilder.AppendLine(UnitResultExtensionsGenerator.ToHttpResultE(mapperClassName, resultErrorType, httpResultType));
        }
        
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("}");
        
        context.AddSource("ResultExtensions.g.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
    }
}